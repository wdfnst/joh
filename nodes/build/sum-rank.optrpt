Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -xMIC-AVX512 -qopt-report-phase=vec -qopt-report=5 -fopenmp -std=c++14 -O3 -o build/sum-rank

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank.cc(50,5)
<Distributed chunk1>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(51,25) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-rank.cc(51,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 9.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(50,5)
<Distributed chunk2>
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i]>, stride is 16   [ sum-rank.cc(51,16) ]
   remark #15305: vectorization support: vector length 32
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.019
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 1.650 
   remark #15478: estimated potential speedup: 1.200 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(54,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function .1 cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (22:14) and ret (23:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (23:1) and ret (22:14)
LOOP END

LOOP BEGIN at sum-rank.cc(38,17) inlined into sum-rank.cc(75,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function .3 cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (22:14) and ret (23:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (23:1) and ret (22:14)
LOOP END

LOOP BEGIN at sum-rank.cc(38,17) inlined into sum-rank.cc(76,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function .5 cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (22:14) and ret (23:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (23:1) and ret (22:14)
LOOP END

LOOP BEGIN at sum-rank.cc(38,17) inlined into sum-rank.cc(77,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function .7 cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (22:14) and ret (23:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (23:1) and ret (22:14)
LOOP END

LOOP BEGIN at sum-rank.cc(38,17) inlined into sum-rank.cc(78,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function .9 cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-rank.cc(23,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (22:14) and ret (23:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (23:1) and ret (22:14)
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(55,20)
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <b.a[rank[i]]>, part of index is read from memory   [ sum-rank.cc(25,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.283
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(55,20)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.385
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(75,5)
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <b.a[rank[i]]>, part of index is read from memory   [ sum-rank.cc(25,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.283
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(75,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.385
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(76,5)
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <b.a[rank[i]]>, part of index is read from memory   [ sum-rank.cc(25,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.283
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(76,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.385
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(77,5)
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <b.a[rank[i]]>, part of index is read from memory   [ sum-rank.cc(25,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.283
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(77,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.385
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(78,5)
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <b.a[rank[i]]>, part of index is read from memory   [ sum-rank.cc(25,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.283
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(23,1) inlined into sum-rank.cc(78,5)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.385
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

Begin optimization report for: calc()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank.cc(23,1)
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <b.a[rank[i]]>, part of index is read from memory   [ sum-rank.cc(25,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.283
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(23,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(25,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.385
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================
