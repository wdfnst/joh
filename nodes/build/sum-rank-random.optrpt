Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -xMIC-AVX512 -qopt-report-phase=vec -qopt-report=5 -fopenmp -std=c++14 -O3 -o build/sum-rank-random

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(83,5)
<Distributed chunk1>
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][0]>, stride is 16   [ sum-rank-random.cc(84,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][1]>, stride is 16   [ sum-rank-random.cc(85,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][2]>, stride is 16   [ sum-rank-random.cc(86,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][3]>, stride is 16   [ sum-rank-random.cc(87,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][4]>, stride is 16   [ sum-rank-random.cc(88,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][5]>, stride is 16   [ sum-rank-random.cc(89,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][6]>, stride is 16   [ sum-rank-random.cc(90,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][7]>, stride is 16   [ sum-rank-random.cc(91,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][8]>, stride is 16   [ sum-rank-random.cc(92,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][9]>, stride is 16   [ sum-rank-random.cc(93,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][10]>, stride is 16   [ sum-rank-random.cc(94,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][11]>, stride is 16   [ sum-rank-random.cc(95,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][12]>, stride is 16   [ sum-rank-random.cc(96,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][13]>, stride is 16   [ sum-rank-random.cc(97,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][14]>, stride is 16   [ sum-rank-random.cc(98,16) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b.a[i][15]>, stride is 16   [ sum-rank-random.cc(99,16) ]
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.035
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 16 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 28.500 
   remark #15478: estimated potential speedup: 1.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank-random.cc(83,5)
<Distributed chunk2>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank-random.cc(99,29) ]
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-rank-random.cc(99,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.430 
   remark #15478: estimated potential speedup: 9.140 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank-random.cc(110,5)
   remark #15382: vectorization support: call to function calc() cannot be vectorized   [ sum-rank-random.cc(111,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: calc()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: random_swap(int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(334,7) inlined into sum-rank-random.cc(68,24)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__i] (340:4) and gen._M_x[__i-1] (336:20)
LOOP END

LOOP BEGIN at sum-rank-random.cc(70,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(901,42) inlined into sum-rank-random.cc(71,23)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(71,23)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.182
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19 
         remark #15477: vector cost: 4.120 
         remark #15478: estimated potential speedup: 4.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into sum-rank-random.cc(71,23)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (416:4) and gen._M_x[__k+?] (416:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (416:4) and gen._M_x[__k] (416:4)
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(71,23)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.283
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(932,21) inlined into sum-rank-random.cc(71,23)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(71,23)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.182
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19 
         remark #15477: vector cost: 4.120 
         remark #15478: estimated potential speedup: 4.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into sum-rank-random.cc(71,23)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (416:4) and gen._M_x[__k+?] (416:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (416:4) and gen._M_x[__k] (416:4)
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(71,23)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.283
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(71,23)
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.182
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 4.120 
      remark #15478: estimated potential speedup: 4.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into sum-rank-random.cc(71,23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (416:4) and gen._M_x[__k+?] (416:4)
      remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (416:4) and gen._M_x[__k] (416:4)
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(901,42) inlined into sum-rank-random.cc(72,23)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(72,23)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.182
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19 
         remark #15477: vector cost: 4.120 
         remark #15478: estimated potential speedup: 4.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into sum-rank-random.cc(72,23)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (416:4) and gen._M_x[__k+?] (416:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (416:4) and gen._M_x[__k] (416:4)
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(72,23)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.283
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(932,21) inlined into sum-rank-random.cc(72,23)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(72,23)
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.182
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19 
         remark #15477: vector cost: 4.120 
         remark #15478: estimated potential speedup: 4.330 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into sum-rank-random.cc(72,23)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (416:4) and gen._M_x[__k+?] (416:4)
         remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (416:4) and gen._M_x[__k] (416:4)
      LOOP END

      LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(72,23)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
         remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
         remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
         remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 0.283
      LOOP END
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(72,23)
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.182
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 4.120 
      remark #15478: estimated potential speedup: 4.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into sum-rank-random.cc(72,23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between gen._M_x[__k] (416:4) and gen._M_x[__k+?] (416:4)
      remark #15346: vector dependence: assumed ANTI dependence between gen._M_x[__k+?] (416:4) and gen._M_x[__k] (416:4)
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(71,23)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.283
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into sum-rank-random.cc(72,23)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference gen._M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference gen._M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference gen._M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.283
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: std::uniform_int_distribution<int>::operator()<std::mt19937>(std::uniform_int_distribution<int> *, std::mt19937 &, const std::uniform_int_distribution<int>::param_type &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(458,11) inlined into /usr/include/c++/4.8.5/bits/random.tcc(904,31)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(904,31)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference __urng->_M_x[__k] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.238
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(904,31)
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.485
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 4.120 
      remark #15478: estimated potential speedup: 4.150 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(904,31)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between __urng->_M_x[__k] (416:4) and __urng->_M_x[__k+?] (416:4)
      remark #15346: vector dependence: assumed ANTI dependence between __urng->_M_x[__k+?] (416:4) and __urng->_M_x[__k] (416:4)
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(904,31)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.310
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(932,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(931,35)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference __urng->_M_x[__k] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.238
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(931,35)
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.485
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 19 
      remark #15477: vector cost: 4.120 
      remark #15478: estimated potential speedup: 4.150 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(931,35)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between __urng->_M_x[__k] (416:4) and __urng->_M_x[__k+?] (416:4)
      remark #15346: vector dependence: assumed ANTI dependence between __urng->_M_x[__k+?] (416:4) and __urng->_M_x[__k] (416:4)
   LOOP END

   LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(931,35)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
      remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
      remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.310
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(936,27)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference __urng->_M_x[__k] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.238
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(936,27)
   remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
   remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.303
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 4.120 
   remark #15478: estimated potential speedup: 4.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(404,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(936,27)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(406,22) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k+1] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(407,10) ]
   remark #15388: vectorization support: reference __urng->_M_x[__k] has aligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,4) ]
   remark #15389: vectorization support: reference __urng->_M_x[__k+397] has unaligned access   [ /usr/include/c++/4.8.5/bits/random.tcc(408,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.207
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at /usr/include/c++/4.8.5/bits/random.tcc(412,7) inlined into /usr/include/c++/4.8.5/bits/random.tcc(936,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between __urng->_M_x[__k] (416:4) and __urng->_M_x[__k+?] (416:4)
   remark #15346: vector dependence: assumed ANTI dependence between __urng->_M_x[__k+?] (416:4) and __urng->_M_x[__k] (416:4)
LOOP END
===========================================================================

Begin optimization report for: outer_cal<30U>()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9) inlined into sum-rank-random.cc(59,12)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: outer_cal<40U>()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9) inlined into sum-rank-random.cc(59,12)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: outer_cal<50U>()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9) inlined into sum-rank-random.cc(59,12)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: outer_cal<60U>()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9) inlined into sum-rank-random.cc(59,12)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: outer_cal<70U>()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9) inlined into sum-rank-random.cc(59,12)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: outer_cal<80U>()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-rank-random.cc(29,9) inlined into sum-rank-random.cc(59,12)
      remark #15388: vectorization support: reference b.a[rank[i]][_2] has aligned access   [ sum-rank-random.cc(29,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.280 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-rank-random.cc(27,1) inlined into sum-rank-random.cc(59,12)
<Remainder>
LOOP END
===========================================================================
