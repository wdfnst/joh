Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -xMIC-AVX512 -qopt-report-phase=vec -qopt-report=5 -fopenmp -std=c++14 -O3 -o -lmemkind

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank.cc(45,5)
<Distributed chunk1>
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][0]>, stride is 16   [ sum-rank.cc(46,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][1]>, stride is 16   [ sum-rank.cc(47,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][2]>, stride is 16   [ sum-rank.cc(48,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][3]>, stride is 16   [ sum-rank.cc(49,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][4]>, stride is 16   [ sum-rank.cc(50,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][5]>, stride is 16   [ sum-rank.cc(51,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][6]>, stride is 16   [ sum-rank.cc(52,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][7]>, stride is 16   [ sum-rank.cc(53,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][8]>, stride is 16   [ sum-rank.cc(54,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][9]>, stride is 16   [ sum-rank.cc(55,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][10]>, stride is 16   [ sum-rank.cc(56,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][11]>, stride is 16   [ sum-rank.cc(57,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][12]>, stride is 16   [ sum-rank.cc(58,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][13]>, stride is 16   [ sum-rank.cc(59,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][14]>, stride is 16   [ sum-rank.cc(60,9) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <b->a[i][15]>, stride is 16   [ sum-rank.cc(61,9) ]
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.035
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 16 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 34 
   remark #15477: vector cost: 28.500 
   remark #15478: estimated potential speedup: 1.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(45,5)
<Peeled loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(61,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.455
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-rank.cc(45,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference rank[i] has aligned access   [ sum-rank.cc(61,22) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ sum-rank.cc(61,22) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.667
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 15.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-rank.cc(45,5)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference rank[i] has unaligned access   [ sum-rank.cc(61,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.455
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-rank.cc(65,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-rank.cc(18,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-rank.cc(18,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-rank.cc(18,1) ]
   remark #15382: vectorization support: call to function .0 cannot be vectorized   [ sum-rank.cc(18,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-rank.cc(18,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (17:14) and ret (18:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (18:1) and ret (17:14)
LOOP END

LOOP BEGIN at sum-rank.cc(18,1) inlined into sum-rank.cc(65,43)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (20:9) and at (21:9)
   remark #15346: vector dependence: assumed FLOW dependence between at (21:9) and at (20:9)
   remark #15346: vector dependence: assumed FLOW dependence between at (21:9) and at (20:9)
   remark #15346: vector dependence: assumed ANTI dependence between at (20:9) and at (21:9)
LOOP END

LOOP BEGIN at sum-rank.cc(18,1) inlined into sum-rank.cc(71,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (20:9) and at (21:9)
   remark #15346: vector dependence: assumed FLOW dependence between at (21:9) and at (20:9)
   remark #15346: vector dependence: assumed FLOW dependence between at (21:9) and at (20:9)
   remark #15346: vector dependence: assumed ANTI dependence between at (20:9) and at (21:9)
LOOP END
===========================================================================

Begin optimization report for: calc()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-rank.cc(18,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (20:9) and at (21:9)
   remark #15346: vector dependence: assumed FLOW dependence between at (21:9) and at (20:9)
   remark #15346: vector dependence: assumed FLOW dependence between at (21:9) and at (20:9)
   remark #15346: vector dependence: assumed ANTI dependence between at (20:9) and at (21:9)
LOOP END
===========================================================================
