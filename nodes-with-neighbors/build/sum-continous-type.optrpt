Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -xMIC-AVX512 -qopt-report-phase=vec -qopt-report=5 -fopenmp -std=c++14 -O3 -o build/sum-continous-type

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-continous-type.cc(56,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-continous-type.cc(57,9)
      remark #15388: vectorization support: reference a.a[i][j] has aligned access   [ sum-continous-type.cc(58,13) ]
      remark #15305: vectorization support: vector length 16
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.400
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.310 
      remark #15478: estimated potential speedup: 9.140 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-continous-type.cc(64,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function .1 cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (26:14) and ret (27:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (27:1) and ret (26:14)
LOOP END

LOOP BEGIN at sum-continous-type.cc(69,17)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function .3 cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-continous-type.cc(27,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (26:14) and ret (27:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (27:1) and ret (26:14)
LOOP END

LOOP BEGIN at sum-continous-type.cc(27,1) inlined into sum-continous-type.cc(65,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-continous-type.cc(30,9) inlined into sum-continous-type.cc(65,16)
      remark #15388: vectorization support: reference a.a[i][_2] has aligned access   [ sum-continous-type.cc(30,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 1.370 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-continous-type.cc(27,1) inlined into sum-continous-type.cc(65,16)
<Remainder>
LOOP END

LOOP BEGIN at sum-continous-type.cc(27,1) inlined into sum-continous-type.cc(70,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-continous-type.cc(30,9) inlined into sum-continous-type.cc(70,16)
      remark #15388: vectorization support: reference a.a[i][_2] has aligned access   [ sum-continous-type.cc(30,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 1.370 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-continous-type.cc(27,1) inlined into sum-continous-type.cc(70,16)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-continous-type.cc(27,1)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sum-continous-type.cc(30,9)
      remark #15388: vectorization support: reference a.a[i][_2] has aligned access   [ sum-continous-type.cc(30,16) ]
      remark #15305: vectorization support: vector length 8
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: MATERIALIZED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 1.370 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at sum-continous-type.cc(27,1)
<Remainder>
LOOP END
===========================================================================
