Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -xMIC-AVX512 -qopt-report-phase=vec -qopt-report=5 -fopenmp -std=c++14 -O3 -o build/sum-uncontinous

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-uncontinous.cc(33,5)
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.a[i][j]>, stride is 16   [ sum-uncontinous.cc(35,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.next[i][j]>, stride is 16   [ sum-uncontinous.cc(37,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.next[i][j]>, stride is 16   [ sum-uncontinous.cc(37,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.next[i][j]>, stride is 16   [ sum-uncontinous.cc(37,13) ]
   remark #15416: vectorization support: non-unit strided store was generated for the variable <a.next[i][j]>, stride is 16   [ sum-uncontinous.cc(37,13) ]
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.098
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 16 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 76 
   remark #15477: vector cost: 30.500 
   remark #15478: estimated potential speedup: 2.490 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at sum-uncontinous.cc(34,9)
   LOOP END

   LOOP BEGIN at sum-uncontinous.cc(36,9)
   LOOP END
LOOP END

LOOP BEGIN at sum-uncontinous.cc(43,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function .2 cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ret (18:14) and ret (44:9)
   remark #15346: vector dependence: assumed ANTI dependence between ret (44:9) and ret (18:14)
LOOP END

LOOP BEGIN at sum-uncontinous.cc(48,17)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function .4 cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-uncontinous.cc(19,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ret (18:14) and ret (49:9)
   remark #15346: vector dependence: assumed ANTI dependence between ret (49:9) and ret (18:14)
LOOP END

LOOP BEGIN at sum-uncontinous.cc(20,5) inlined into sum-uncontinous.cc(44,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (21:39) and at (22:38)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (22:38) and at (21:39)

   LOOP BEGIN at sum-uncontinous.cc(21,9) inlined into sum-uncontinous.cc(44,16)
   LOOP END

   LOOP BEGIN at sum-uncontinous.cc(22,9) inlined into sum-uncontinous.cc(44,16)
   LOOP END
LOOP END

LOOP BEGIN at sum-uncontinous.cc(20,5) inlined into sum-uncontinous.cc(49,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (21:39) and at (22:38)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (22:38) and at (21:39)

   LOOP BEGIN at sum-uncontinous.cc(21,9) inlined into sum-uncontinous.cc(49,16)
   LOOP END

   LOOP BEGIN at sum-uncontinous.cc(22,9) inlined into sum-uncontinous.cc(49,16)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: calc()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-uncontinous.cc(20,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (21:39) and at (22:38)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (22:38) and at (21:39)

   LOOP BEGIN at sum-uncontinous.cc(21,9)
   LOOP END

   LOOP BEGIN at sum-uncontinous.cc(22,9)
   LOOP END
LOOP END
===========================================================================
