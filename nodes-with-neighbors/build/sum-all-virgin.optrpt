Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -xMIC-AVX512 -qopt-report-phase=vec -qopt-report=5 -fopenmp -std=c++14 -O3 -o build/sum-all-virgin

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-all-virgin.cc(23,5)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ sum-all-virgin.cc(24,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.214
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-all-virgin.cc(23,5)
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-all-virgin.cc(24,9) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 9.590 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-all-virgin.cc(23,5)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-all-virgin.cc(24,9) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-all-virgin.cc(29,5)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ sum-all-virgin.cc(12,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ sum-all-virgin.cc(12,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ sum-all-virgin.cc(12,1) ]
   remark #15382: vectorization support: call to function .0 cannot be vectorized   [ sum-all-virgin.cc(12,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ sum-all-virgin.cc(12,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (11:14) and ret (12:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between ret (12:1) and ret (11:14)
LOOP END

LOOP BEGIN at sum-all-virgin.cc(12,1) inlined into sum-all-virgin.cc(30,16)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ sum-all-virgin.cc(15,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.154
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-all-virgin.cc(12,1) inlined into sum-all-virgin.cc(30,16)
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-all-virgin.cc(15,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 2.050
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 9.590 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-all-virgin.cc(12,1) inlined into sum-all-virgin.cc(30,16)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-all-virgin.cc(15,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-all-virgin.cc(34,1)
   remark #15382: vectorization support: call to function calc() cannot be vectorized   [ sum-all-virgin.cc(36,12) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END
===========================================================================

Begin optimization report for: calc()

    Report from: Vector optimizations [vec]


LOOP BEGIN at sum-all-virgin.cc(12,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference a[i] has unaligned access   [ sum-all-virgin.cc(15,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.154
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at sum-all-virgin.cc(12,1)
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-all-virgin.cc(15,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 2.050
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 9.590 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sum-all-virgin.cc(12,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[i] has aligned access   [ sum-all-virgin.cc(15,16) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================
